version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: notification_db_dev
    environment:
      POSTGRES_DB: notification_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Event-Driven Architecture
  redis:
    image: redis:7-alpine
    container_name: notification_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: notification_backend_dev
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/notification_system
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-key-change-in-production
      - PORT=5001
      - NODE_ENV=development
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend Next.js Application (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: notification_frontend_dev
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5001
      - NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  postgres_data_dev:
  redis_data_dev: 